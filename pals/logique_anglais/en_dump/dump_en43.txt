   #alternate Edit this page Wikipedia (en) Wikipedia Atom feed

   Jump to content

   [ ] Main menu
   Main menu
   (BUTTON) move to sidebar (BUTTON) hide
   Navigation
     * Main page
     * Contents
     * Current events
     * Random article
     * About Wikipedia
     * Contact us

   Contribute
     * Help
     * Learn to edit
     * Community portal
     * Recent changes
     * Upload file

   Wikipedia The Free Encyclopedia
   Search
   ____________________
   (BUTTON) Search

   [ ] Appearance

     * Donate
     * Create account
     * Log in

   [ ] Personal tools
     * Donate
     * Create account
     * Log in

   Pages for logged out editors learn more
     * Contributions
     * Talk

Contents

   (BUTTON) move to sidebar (BUTTON) hide
     * (Top)
     * 1 History
     * 2 PLA
     * 3 PAL
     * 4 GALs
     * 5 CPLDs
     * 6 FPGAs
     * 7 EPLDs
     * 8 Other variants
     * 9 How PLDs retain their configuration
     * 10 PLD programming languages
     * 11 PLD programming devices
     * 12 See also
     * 13 References
     * 14 External links

   [ ] Toggle the table of contents

Programmable logic device

   [ ] 20 languages
     * Català
     * Čeština
     * Deutsch
     * Español
     * Euskara
     * فارسی
     * Français
     * 한국어
     * Italiano
     * 日本語
     * Polski
     * Português
     * Русский
     * Slovenčina
     * Српски / srpski
     * ไทย
     * Українська
     * Tiếng Việt
     * 吴语
     * 中文

   Edit links

     * Article
     * Talk

   [ ] English

     * Read
     * Edit
     * View history

   [ ] Tools
   Tools
   (BUTTON) move to sidebar (BUTTON) hide
   Actions
     * Read
     * Edit
     * View history

   General
     * What links here
     * Related changes
     * Upload file
     * Special pages
     * Permanent link
     * Page information
     * Cite this page
     * Get shortened URL
     * Download QR code

   Print/export
     * Download as PDF
     * Printable version

   In other projects
     * Wikimedia Commons
     * Wikidata item

   Appearance
   (BUTTON) move to sidebar (BUTTON) hide
   From Wikipedia, the free encyclopedia
   Reconfigurable digital circuit element

   [40px-Wiki_letter_w.svg.png]
   This article's lead section may be too short to adequately summarize
   the key points. Please consider expanding the lead to provide an
   accessible overview of all important aspects of the article. (January
   2013)
   [300px-Programmable_Logic_Device.svg.png] A simplified PAL device. The
   programmable elements (shown as a fuse) connect both the true and
   complemented inputs to the AND gates. These AND gates, also known as
   product terms, are ORed together to form a sum-of-products logic array.

   A programmable logic device (PLD) is an electronic component used to
   build reconfigurable digital circuits. Unlike digital logic constructed
   using discrete logic gates with fixed functions, the function of a PLD
   is undefined at the time of manufacture. Before the PLD can be used in
   a circuit it must be programmed to implement the desired function.^[1]
   Compared to fixed logic devices, programmable logic devices simplify
   the design of complex logic and may offer superior performance.^[2]
   Unlike for microprocessors, programming a PLD changes the connections
   made between the gates in the device.

   PLDs can broadly be categorised into, in increasing order of
   complexity, simple programmable logic devices (SPLDs), comprising
   programmable array logic, programmable logic array and generic array
   logic; complex programmable logic devices (CPLDs); and
   field-programmable gate arrays (FPGAs).

History

   [edit]

   In 1969, Motorola offered the XC157, a mask-programmed gate array with
   12 gates and 30 uncommitted input/output pins.^[3]

   In 1970, Texas Instruments developed a mask-programmable IC based on
   the IBM read-only associative memory or ROAM. This device, the TMS2000,
   was programmed by altering the metal layer during the production of the
   IC. The TMS2000 had up to 17 inputs and 18 outputs with 8 JK flip-flops
   for memory. TI coined the term programmable logic array (PLA) for this
   device.^[4]

   In 1971, General Electric Company (GE) was developing a programmable
   logic device based on the new programmable read-only memory (PROM)
   technology. This experimental device improved on IBM's ROAM by allowing
   multilevel logic. Intel had just introduced the floating-gate UV EPROM
   so the researcher at GE incorporated that technology. The GE device was
   the first erasable PLD ever developed, predating the Altera EPLD by
   over a decade. GE obtained several early patents on programmable logic
   devices.^[5]^[6]^[7]

   In 1973 National Semiconductor introduced a mask-programmable PLA
   device (DM7575) with 14 inputs and 8 outputs with no memory registers.
   This was more popular than the TI part but the cost of making the metal
   mask limited its use. The device is significant because it was the
   basis for the field programmable logic array produced by Signetics in
   1975, the 82S100. (Intersil actually beat Signetics to market but poor
   yield doomed their part.)^[8]^[9]

   In 1974 GE entered into an agreement with Monolithic Memories (MMI) to
   develop a mask-programmable logic device incorporating the GE
   innovations. The device was named programmable associative logic array
   or PALA. The MMI 5760 was completed in 1976 and could implement
   multilevel or sequential circuits of over 100 gates. The device was
   supported by a GE design environment where Boolean equations would be
   converted to mask patterns for configuring the device. The part was
   never brought to market.^[10]

PLA

   [edit]
   Main article: Programmable logic array

   In 1970, Texas Instruments developed a mask-programmable IC based on
   the IBM read-only associative memory or ROAM. This device, the TMS2000,
   was programmed by altering the metal layer during the production of the
   IC. The TMS2000 had up to 17 inputs and 18 outputs with 8 JK flip-flops
   for memory. TI coined the term programmable logic array for this
   device.^[4]

   A programmable logic array (PLA) has a programmable AND gate array,
   which links to a programmable OR gate array, which can then be
   conditionally complemented to produce an output. A PLA is similar to a
   ROM concept, however a PLA does not provide full decoding of a variable
   and does not generate all the minterms as in a ROM.

PAL

   [edit]
   Main article: Programmable array logic

   PAL devices have arrays of transistor cells arranged in a "fixed-OR,
   programmable-AND" plane used to implement "sum-of-products" binary
   logic equations for each of the outputs in terms of the inputs and
   either synchronous or asynchronous feedback from the outputs.

   MMI introduced a breakthrough device in 1978, the programmable array
   logic or PAL. The architecture was simpler than that of Signetics' FPLA
   because it omitted the programmable OR array. This made the parts
   faster, smaller and cheaper. They were available in 20-pin 300-mil DIP
   packages, while the FPLAs came in 28-pin 600-mil packages. The PAL
   Handbook demystified the design process. The PALASM design software
   (PAL assembler) converted the engineers' Boolean equations into the
   fuse pattern required to program the part. The PAL devices were soon
   second-sourced by National Semiconductor, Texas Instruments and AMD.

   After MMI succeeded with the 20-pin PAL parts, AMD introduced the
   24-pin 22V10 PAL with additional features. After buying out MMI (1987),
   AMD spun off a consolidated operation as Vantis, and that business was
   acquired by Lattice Semiconductor in 1999.

GALs

   [edit]
   Main article: Generic array logic
   [220px-Lattice_GAL_16V8.jpg] Lattice GAL 16V8 and 20V8.  These are 35
   nanosecond devices.

   An improvement on the PAL was the generic array logic device, or GAL,
   invented by Lattice Semiconductor in 1985. This device has the same
   logical properties as the PAL but can be erased and reprogrammed. The
   GAL is very useful in the prototyping stage of a design, when any bugs
   in the logic can be corrected by reprogramming. GALs are programmed and
   reprogrammed using a PAL programmer, or, in the case of chips that
   support it, by using the in-circuit programming technique.

   Lattice GALs combine CMOS and electrically erasable (E^2) floating gate
   technology for a high-speed, low-power logic device. A similar device
   called a PEEL (programmable electrically erasable logic) was introduced
   by the International CMOS Technology (ICT) corporation.

   Sometimes GAL chips are referred as simple programmable logic device
   (SPLD), analogous to complex programmable logic device (CPLD) below.

CPLDs

   [edit]
   Main article: Complex programmable logic device

   PALs and GALs are available only in small sizes, equivalent to a few
   hundred logic gates. For bigger logic circuits, complex PLDs or CPLDs
   can be used. These contain the equivalent of several PALs linked by
   programmable interconnections, all in one integrated circuit. CPLDs can
   replace thousands, or even hundreds of thousands, of logic gates.

   Some CPLDs are programmed using a PAL programmer, but this method
   becomes inconvenient for devices with hundreds of pins. A second method
   of programming is to solder the device to its printed circuit board,
   then feed it with a serial data stream from a personal computer. The
   CPLD contains a circuit that decodes the data stream and configures the
   CPLD to perform its specified logic function. Some manufacturers, such
   as Altera and Atmel (now Microchip), use JTAG to program CPLDs
   in-circuit from .JAM files.

FPGAs

   [edit]
   Main article: Field-programmable gate array

   While PALs were being developed into GALs and CPLDs (all discussed
   above), a separate stream of development was happening. This type of
   device is based on gate array technology and is called the
   field-programmable gate array (FPGA). Early examples of FPGAs are the
   82S100 array, and 82S105 sequencer, by Signetics, introduced in the
   late 1970s. The 82S100 was an array of AND terms. The 82S105 also had
   flip-flop functions.

   (Remark: 82S100 and similar ICs from Signetics have PLA structure,
   AND-plane + OR-plane.)

   FPGAs use a grid of logic gates, and once stored, the data doesn't
   change, similar to that of an ordinary gate array. The term
   field-programmable means the device is programmed by the customer, not
   the manufacturer. FPGAs and gate arrays are similar but gate arrays can
   only be configured at the factory during fabrication.^[11]^[12]^[13]

   FPGAs are usually programmed after being soldered down to the circuit
   board, in a manner similar to that of larger CPLDs. In most larger
   FPGAs, the configuration is volatile and must be re-loaded into the
   device whenever power is applied or different functionality is
   required. Configuration is typically stored in a configuration PROM,
   EEPROM or flash memory.^[14] EEPROM versions may be in-system
   programmable (typically via JTAG).

   The difference between FPGAs and CPLDs is that FPGAs are internally
   based on look-up tables (LUTs), whereas CPLDs form the logic functions
   with sea-of-gates (e.g. sum of products). CPLDs are meant for simpler
   designs while FPGAs are meant for more complex designs. In general,
   CPLDs are a good choice for wide combinational logic applications,
   whereas FPGAs are more suitable for large state machines such as
   microprocessors.

EPLDs

   [edit]
   [220px-PLCC84_UV_Cypress.jpg] An EPLD from Cypress in a PLCC-package

   Using the same technology as EPROMs, EPLDs have a quartz window in the
   package that allows them to be erased on exposure to UV
   light.^[15]^[16]

   Using the same technology as EEPROMs, EEPLDs can be erased
   electrically.^[15]^[16]

   An erasable programmable logic device (EPLD) is an integrated circuit
   that comprises an array of PLDs that do not come pre-connected; the
   connections are programmed electrically by the user. Most GAL and FPGA
   devices are examples of EPLDs.^[citation needed]

Other variants

   [edit]

   These are microprocessor circuits that contain some fixed functions and
   other functions that can be altered by code running on the processor.
   Designing self-altering systems requires that engineers learn new
   methods, and that new software tools be developed.

   PLDs are being sold now that contain a microprocessor with a fixed
   function (the so-called core) surrounded by programmable logic. These
   devices let designers concentrate on adding new features to designs
   without having to worry about making the microprocessor work. Also, the
   fixed-function microprocessor takes less space on the chip than a part
   of the programmable gate array implementing the same processor, leaving
   more space for the programmable gate array to contain the designer's
   specialized circuits.

How PLDs retain their configuration

   [edit]

   A PLD is a combination of a logic device and a memory device. The
   memory is used to store the pattern that was given to the chip during
   programming. Most of the methods for storing data in an integrated
   circuit have been adapted for use in PLDs. These include:
     * Silicon antifuses
     * SRAM
     * EPROM or EEPROM memory cells
     * Flash memory

   Silicon antifuses are connections that are made by applying a voltage
   across a modified area of silicon inside the chip. They are called
   antifuses because they work in the opposite way to normal fuses, which
   begin life as connections until they are broken by an electric current.

   SRAM, or static RAM, is a volatile type of memory, meaning that its
   contents are lost each time the power is switched off. SRAM-based PLDs
   therefore have to be programmed every time the circuit is switched on.
   This is usually done automatically by another part of the circuit.

   An EPROM memory cell is a MOSFET (metal-oxide semiconductor
   field-effect transistor, or MOS transistor) that can be switched on by
   trapping an electric charge permanently on its gate electrode. This is
   done by a PAL programmer. The charge remains for many years and can
   only be removed by exposing the chip to strong ultraviolet light in a
   device called an EPROM eraser.

   Flash memory is non-volatile, retaining its contents even when the
   power is switched off. It is stored on floating-gate MOSFET memory
   cells, and can be erased and reprogrammed as required. This makes it
   useful in PLDs that may be reprogrammed frequently, such as PLDs used
   in prototypes. Flash memory is a kind of EEPROM that holds information
   using trapped electric charges similar to EPROM. Consequently, flash
   memory can hold information for years, but possibly not as many years
   as EPROM.

   As of 2005, most CPLDs are electrically programmable and erasable, and
   non-volatile. This is because they are too small to justify the
   inconvenience of programming internal SRAM cells every time they start
   up, and EPROM cells are more expensive due to their ceramic package
   with a quartz window.

PLD programming languages

   [edit]

   Many PAL programming devices accept input in a standard file format,
   commonly referred to as 'JEDEC files'. They are analogous to software
   compilers. The languages used as source code for logic compilers are
   called hardware description languages, or HDLs.^[1]

   PALASM, ABEL and CUPL are frequently used for low-complexity devices,
   while Verilog and VHDL are popular higher-level description languages
   for more complex devices. The more limited ABEL is often used for
   historical reasons, but for new designs VHDL is more popular, even for
   low-complexity designs.

   For modern PLD programming languages, design flows, and tools, see FPGA
   and reconfigurable computing.

PLD programming devices

   [edit]

   A device programmer is used to transfer the Boolean logic pattern into
   the programmable device. In the early days of programmable logic, every
   PLD manufacturer also produced a specialized device programmer for its
   family of logic devices. Later, universal device programmers came onto
   the market that supported several logic device families from different
   manufacturers. Today's device programmers usually can program common
   PLDs (mostly PAL/GAL equivalents) from all existing manufacturers.
   Common file formats used to store the Boolean logic pattern (fuses) are
   JEDEC, Altera POF (programmable object file), or Xilinx BITstream.^[17]

See also

   [edit]
     * Complex programmable logic device (CPLD)
     * Field-programmable gate array (FPGA)
     * Macrocell array
     * Programmable array logic (PAL)

References

   [edit]
    1. ^ ^a ^b Horowitz, Paul; Hill, Winfield (2015). Horowitz P., Hill W.
       - The Art of Electronics. New York. p. 764.
       ISBN 978-0-521-80926-9.{{cite book}}: CS1 maint: location missing
       publisher (link)
    2. ^ Holdsworth, B.; Woods, R. C. (2003). Digital Logic Design
       (4th ed.). Elsevier. ISBN 978-0-7506-4582-9.
    3. ^ Motorola Semiconductor Data Book, Fourth Edition. Motorola Inc.
       1969. p. IC-73.
    4. ^ ^a ^b Andres, Kent (October 1970). A Texas Instruments
       Application Report: MOS programmable logic arrays. Texas
       Instruments. Bulletin CA-158. Report introduces the TMS2000 and
       TMS2200 series of mask programmable PLAs.
    5. ^ Greer, David L. Electrically Programmable Logic Circuits US
       Patent 3,818,452. Assignee: General Electric, Filed: April 28,
       1972, Granted: June 18, 1974
    6. ^ Greer, David L. Multiple Level Associative Logic Circuits US
       Patent 3,816,725. Assignee: General Electric, Filed: April 28,
       1972, Granted: June 11, 1974
    7. ^ Greer, David L. Segmented Associative Logic Circuits US Patent
       3,849,638. Assignee: General Electric, Filed: July 18, 1973,
       Granted: November 19, 1974
    8. ^ "Semiconductors and IC's : FPLA". EDN. 20 (13). Boston, MA:
       Cahners Publishing: 66. July 20, 1975. Press release on Intersil
       IM5200 field programmable logic array. Fourteen inputs pins and 48
       product terms. Avalanched-induced-migration programming. Unit price
       was $37.50
    9. ^ "FPLA's give quick custom logic". EDN. 20 (13). Boston, MA:
       Cahners Publishing: 61. July 20, 1975. Press release on Signetics
       82S100 and 82S101 field programmable logic arrays. Fourteen inputs
       pins, 8 output pins and 48 product terms. NiCr fuse link
       programming.
   10. ^ Pellerin, David; Michael Holley (1991). Practical Design Using
       Programmable Logic. Prentice-Hall. p. 15. ISBN 0-13-723834-7.
   11. ^ Dorf, Richard C. (3 October 2018). Electronics, Power
       Electronics, Optoelectronics, Microwaves, Electromagnetics, and
       Radar. CRC Press. ISBN 978-1-4200-0315-4.
   12. ^ Vahid, Frank; Givargis, Tony D. (17 October 2001). Embedded
       System Design: A Unified Hardware / Software Introduction. John
       Wiley & Sons. ISBN 978-0-471-38678-0.
   13. ^ Chen, Wai-Kai (3 October 2018). The VLSI Handbook. CRC Press.
       ISBN 978-1-4200-0596-7.
   14. ^ "Using Flash Memory to Configure FPGAs" (PDF). Altera. Retrieved
       2024-08-21.
   15. ^ ^a ^b Tertulien Ndjountche. "Digital Electronics 2: Sequential
       and Arithmetic Logic Circuits". 2016. p. 224.
   16. ^ ^a ^b Clive Maxfield. "The Design Warrior's Guide to FPGAs".
       2004. p. 20
   17. ^ PLD File Formats

External links

   [edit]
   Wikibooks has a book on the topic of: Programmable Logic

   Wikimedia Commons has media related to Programmable logic devices.

     *

   "PLD Tools Creating SVF, JAM, STAPL and other formats". JTAG /
   boundary-scan. Corelis. Dec 1, 2010. Archived from the original on
   March 18, 2012. Retrieved July 18, 2011.

     "FPGAs and CPLDs". Lattice Semiconductor.

     * v
     * t
     * e

   Programmable logic

   Concepts

     * ASIC
     * SoC
     * FPGA
          + Logic block
     * CPLD
     * EPLD
     * PLA
     * PAL
     * GAL
     * PSoC
     * Reconfigurable computing
          + Xputer
     * Soft microprocessor
     * Circuit underutilization
     * High-level synthesis
     * Hardware acceleration

   Languages

     * Verilog
          + A
          + AMS
     * VHDL
          + AMS
          + VITAL
     * SystemVerilog
          + DPI
     * SystemC
     * AHDL
     * Handel-C
     * Lola
     * PSL
     * UPF
     * PALASM
     * ABEL
     * CUPL
     * C to HDL
     * Flow to HDL
     * MyHDL
     * ELLA
     * Chisel

   Companies

     * Accellera
     * Achronix
     * AMD
     * Aldec
     * Arm
     * Cadence
     * Infineon
     * Intel
     * Lattice
     * Microchip Technology
     * NXP
     * Siemens
     * Synopsys
     * Texas Instruments

   Products

   Hardware
     * iCE
     * Stratix
     * Virtex

   Software
     * Intel Quartus Prime
     * Xilinx ISE
     * Vivado
     * ModelSim
     * VTR
     * Simulators

   Intellectual
   property
   Proprietary
     * ARC
     * ARM Cortex-M
     * LEON
     * LatticeMico8
     * MicroBlaze
     * PicoBlaze
     * Nios
     * Nios II

   Open-source
     * JOP
     * LatticeMico32
     * OpenCores
     * OpenRISC
          + 1200
     * Power ISA
          + Libre-SOC
          + Microwatt
     * RISC-V

     * v
     * t
     * e

   Digital electronics

   Components

     * Transistor
     * Resistor
     * Inductor
     * Capacitor
     * Printed electronics
     * Printed circuit board
     * Electronic circuit
     * Flip-flop
     * Memory cell
     * Combinational logic
     * Sequential logic
     * Logic gate
     * Boolean circuit
     * Integrated circuit (IC)
     * Hybrid integrated circuit (HIC)
     * Mixed-signal integrated circuit
     * Three-dimensional integrated circuit (3D IC)
     * Emitter-coupled logic (ECL)
     * Erasable programmable logic device (EPLD)
     * Macrocell array
     * Programmable logic array (PLA)
     * Programmable logic device (PLD)
     * Programmable Array Logic (PAL)
     * Generic Array Logic (GAL)
     * Complex programmable logic device (CPLD)
     * Field-programmable gate array (FPGA)
     * Field-programmable object array (FPOA)
     * Application-specific integrated circuit (ASIC)
     * Tensor Processing Unit (TPU)

   Theory

     * Digital signal
     * Boolean algebra
     * Logic synthesis
     * Logic in computer science
     * Computer architecture
     * Digital signal
          + Digital signal processing
     * Circuit minimization
     * Switching circuit theory
     * Gate equivalent

   Design

     * Logic synthesis
     * Place and route
          + Placement
          + Routing
     * Transaction-level modeling
     * Register-transfer level
          + Hardware description language
          + High-level synthesis
     * Formal equivalence checking
     * Synchronous logic
     * Asynchronous logic
     * Finite-state machine
          + Hierarchical state machine

   Applications

     * Computer hardware
          + Hardware acceleration
     * Digital audio
          + radio
     * Digital photography
     * Digital telephone
     * Digital video
          + cinematography
          + television
     * Electronic literature

   Design issues

     * Metastability
     * Runt pulse

   Authority control databases: National Edit this at Wikidata
     * Czech Republic

   Retrieved from
   "https://en.wikipedia.org/w/index.php?title=Programmable_logic_device&o
   ldid=1264062025"

   Category:
     * Gate arrays

   Hidden categories:
     * CS1 maint: location missing publisher
     * Articles with short description
     * Short description is different from Wikidata
     * Use American English from April 2019
     * All Wikipedia articles written in American English
     * Wikipedia introduction cleanup from January 2013
     * All pages needing cleanup
     * Articles covered by WikiProject Wikify from January 2013
     * All articles covered by WikiProject Wikify
     * All articles with unsourced statements
     * Articles with unsourced statements from May 2021
     * Commons category link is on Wikidata

     * This page was last edited on 20 December 2024, at 06:01 (UTC).
     * Text is available under the Creative Commons Attribution-ShareAlike
       4.0 License; additional terms may apply. By using this site, you
       agree to the Terms of Use and Privacy Policy. Wikipedia® is a
       registered trademark of the Wikimedia Foundation, Inc., a
       non-profit organization.

     * Privacy policy
     * About Wikipedia
     * Disclaimers
     * Contact Wikipedia
     * Code of Conduct
     * Developers
     * Statistics
     * Cookie statement
     * Mobile view

     * Wikimedia Foundation
     * Powered by MediaWiki
