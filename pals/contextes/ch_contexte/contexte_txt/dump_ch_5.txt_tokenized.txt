+ 6 . 3 元 推理 规 则
+ 6 . 4 证明 的 例子
* 7 等 价 于 等 式逻辑
* 8 其他 逻辑 演算
* 9 参见

--------------------------------------------------
+ 6 . 4 证明 的 例子
* 7 等 价 于 等 式逻辑
* 8 其他 逻辑 演算
* 9 参见
* 10 引用

--------------------------------------------------
[ ] 开关 目录

命题 逻辑

[ ] 51 种 语言

--------------------------------------------------
维基 百科 ， 自由 的 百科全书

命题 逻辑 是 逻辑学 的 一个 分支 。 ^ [ 1 ]
它 也 称为 命题 演算 、 句子 演算 、 句子 逻辑 ， 有时 也 称为 零阶 逻辑 。 它 涉及 命题 （ 可以 是 真 或 假 ） 和 命题 之间 的 关系 ， 包括 基于 它们 的 论证 的 构建 。 复合 命题 是 通过
逻辑 连 接 词 连 接 命题 而 形成 的 。 不 包含 逻辑 连 接词 的 命题 称为 原子 命题 。

--------------------------------------------------

命题 逻辑 是 逻辑学 的 一个 分支 。 ^ [ 1 ]
它 也 称为 命题 演算 、 句子 演算 、 句子 逻辑 ， 有时 也 称为 零阶 逻辑 。 它 涉及 命题 （ 可以 是 真 或 假 ） 和 命题 之间 的 关系 ， 包括 基于 它们 的 论证 的 构建 。 复合 命题 是 通过
逻辑 连 接 词 连 接 命题 而 形成 的 。 不 包含 逻辑 连 接词 的 命题 称为 原子 命题 。
与 一 阶 逻辑 不 同 ， 命题 逻辑 不 处理 非逻辑 对象 、 以及 关于 它们 的 谓词 或 量词 。 然而 ， 命题 逻辑 的 所有 机制 都 包含 在 一 阶 逻辑 和 高阶 逻辑 中 。 从 这个 意义 上 说 ， 命题

--------------------------------------------------
命题 逻辑 是 逻辑学 的 一个 分支 。 ^ [ 1 ]
它 也 称为 命题 演算 、 句子 演算 、 句子 逻辑 ， 有时 也 称为 零阶 逻辑 。 它 涉及 命题 （ 可以 是 真 或 假 ） 和 命题 之间 的 关系 ， 包括 基于 它们 的 论证 的 构建 。 复合 命题 是 通过
逻辑 连 接 词 连 接 命题 而 形成 的 。 不 包含 逻辑 连 接词 的 命题 称为 原子 命题 。
与 一 阶 逻辑 不 同 ， 命题 逻辑 不 处理 非逻辑 对象 、 以及 关于 它们 的 谓词 或 量词 。 然而 ， 命题 逻辑 的 所有 机制 都 包含 在 一 阶 逻辑 和 高阶 逻辑 中 。 从 这个 意义 上 说 ， 命题
逻辑 是 一 阶 逻辑 和 高阶逻辑 的 基础 。

--------------------------------------------------
它 也 称为 命题 演算 、 句子 演算 、 句子 逻辑 ， 有时 也 称为 零阶 逻辑 。 它 涉及 命题 （ 可以 是 真 或 假 ） 和 命题 之间 的 关系 ， 包括 基于 它们 的 论证 的 构建 。 复合 命题 是 通过
逻辑 连 接 词 连 接 命题 而 形成 的 。 不 包含 逻辑 连 接词 的 命题 称为 原子 命题 。
与 一 阶 逻辑 不 同 ， 命题 逻辑 不 处理 非逻辑 对象 、 以及 关于 它们 的 谓词 或 量词 。 然而 ， 命题 逻辑 的 所有 机制 都 包含 在 一 阶 逻辑 和 高阶 逻辑 中 。 从 这个 意义 上 说 ， 命题
逻辑 是 一 阶 逻辑 和 高阶逻辑 的 基础 。


--------------------------------------------------
逻辑 连 接 词 连 接 命题 而 形成 的 。 不 包含 逻辑 连 接词 的 命题 称为 原子 命题 。
与 一 阶 逻辑 不 同 ， 命题 逻辑 不 处理 非逻辑 对象 、 以及 关于 它们 的 谓词 或 量词 。 然而 ， 命题 逻辑 的 所有 机制 都 包含 在 一 阶 逻辑 和 高阶 逻辑 中 。 从 这个 意义 上 说 ， 命题
逻辑 是 一 阶 逻辑 和 高阶逻辑 的 基础 。

在 逻辑 和 数学 里 ， 命题 逻辑 是 一个 形式 系统 ,

--------------------------------------------------
逻辑 是 一 阶 逻辑 和 高阶逻辑 的 基础 。

在 逻辑 和 数学 里 ， 命题 逻辑 是 一个 形式 系统 ,
有 可以 由 以 逻辑 运算 符 结合 原子 命题 来 构成 代表 “ 命题 ” 的 公式 ， 以及 允许 某些 公式 建 构成 “ 定理 ” 的 一 套 形式 “ 证明 规 则 ” 。


--------------------------------------------------

在 逻辑 和 数学 里 ， 命题 逻辑 是 一个 形式 系统 ,
有 可以 由 以 逻辑 运算 符 结合 原子 命题 来 构成 代表 “ 命题 ” 的 公式 ， 以及 允许 某些 公式 建 构成 “ 定理 ” 的 一 套 形式 “ 证明 规 则 ” 。

术语

--------------------------------------------------

一 般 地 说 ， 演算 是 一个 形式 系统 ， 包括 一 套 语法 表示式 （ 合式 公式 ） 、 这些 表示 式 的 一个 特定 子集 （ 公理 ） 和 一 套 定义 了 特定 的 二 元 关系 的 形式 规 则 ， 这个 二 元 关
系 可 解释 为 表示 式 空间 上 的 逻辑 等 价 关系 。

若 形式 系统 会 作为 一个 逻辑 系统 ， 其 表示 式 会 被 解释 成 数学 陈述 ， 且 其规 则 ， 被 称之为 “ 推理 规 则 ” ， 则 一 般 会 是 保真 的 。 在 此 设置 下 ， 规 则 （ 可能 也 包括 公理 ）

--------------------------------------------------
系 可 解释 为 表示 式 空间 上 的 逻辑 等 价 关系 。

若 形式 系统 会 作为 一个 逻辑 系统 ， 其 表示 式 会 被 解释 成 数学 陈述 ， 且 其规 则 ， 被 称之为 “ 推理 规 则 ” ， 则 一 般 会 是 保真 的 。 在 此 设置 下 ， 规 则 （ 可能 也 包括 公理 ）
可以 被 用 来 ， 从 给 定 为 真 的 陈述 的 公式 中 ， 推导 出 表示 真 的 陈述 的 公式 来 。


--------------------------------------------------
定义 真值 和 赋值 （ 或 解释 ） 。

命题 运算 的 语言 包括 ： （ 1 ） 一 套 原始 符号 ， 被 称之为 “ 原子公式 ” 、 “ 占 位符 ” 、 “ 命题 字母 ” 或 “ 命题 变量 ” ； （ 2 ） 一 套 运算 符号 ， 被 称之为 “ 逻辑 运算 符
” 。 一个 合式 公式 是 任 一 原 子公式 ， 或 任 一 以 运算 符号 依文 法规 则 由 原 子公式 建立 起 的 公式 。


--------------------------------------------------
encoding = " application / x - t ex " > {\displaystyle \ Omega \ ! }< / annotation >
< / semantics > : MATH ]
{\displaystyle \ Omega \ ! } 是 名 为 “ 算子符号 ” 或 “ 逻辑 运算符 ” 之 元素 所 组成 的 有限 集合 。 集合
[ MATH : < semantics > < mrow class = " MJX - TeXAtom - ORD " > < mstyle
displaystyle = " true " scriptlevel = " 0 " > < mi

--------------------------------------------------
, \ rightarrow , \ leftrightarrow \}\ , } 。

一 种 常用 的 做法 是 把 常数 逻辑值 当作 一 种 零元 算子 ， 即 ：

[ MATH : < semantics > < mrow class = " MJX - TeXAtom - ORD " >

--------------------------------------------------
< / mrow > < annotation encoding = " application / x - t ex " > {\displaystyle
\ land }< / annotation > < / semantics > : MATH ]
{\displaystyle \ land } 。 逻辑值 所 构成 的 集合 也 有 许多 不 同 的 符号 表示 ， 如 { 假 , 真 } 、 { F , T } 或
{ 0 , 1 } 来 取替 {
[ MATH : < semantics > < mrow class = " MJX - TeXAtom - ORD " > < mstyle

--------------------------------------------------
\ ! }< / annotation > < / semantics > : MATH ]
{\displaystyle \ mathrm { Z } \ ! }
集合 是 “ 变换 规 则 ” （ 当作 为 逻辑 应用 时 则 称之为 “ 推理 规 则 ” ） 之 所 构成 的 有限 集合 。
[ MATH : < semantics > < mrow class = " MJX - TeXAtom - ORD " > < mstyle
displaystyle = " true " scriptlevel = " 0 " > < mrow class = " MJX - TeXAtom - ORD " >

--------------------------------------------------
encoding = " application / x - t ex " > {\displaystyle \ mathrm { Z }
\ ! }< / annotation > < / semantics > : MATH ]
{\displaystyle \ mathrm { Z } \ ! } 集合 的 “ 变换 规 则 ” 是 用 “ 原子公式 ” 和 “ 逻辑 运算符 ” 构成 的 。

*

--------------------------------------------------
encoding = " application / x - t ex " > {\displaystyle \ mathrm { I }
\ ! }< / annotation > < / semantics > : MATH ]
{\displaystyle \ mathrm { I } \ ! } 是 “ 起始点 ” （ 当 得到 逻辑 解释 时 则 称之为 “ 公理 ” ） 所 构成 的 有限 集合 。

依据 所 使用 的 精确 形式 文法 或 文法 形式化 ， 可能 需要 以 左括 号 " （ " 和 右括 号 " ） " 作 语法 上 的 辅助 ， 用 来 完成 公式 的 构造 。

--------------------------------------------------
{\displaystyle \ mathrm { A } = \{p , q , r , s , t , u \}\ , } 。

功能 齐全 的 套装 逻辑 运算符 （ 逻辑 连 接词 和 否 定 ） 的 Ω如下 。
*
[ MATH : < semantics > < mrow class = " MJX - TeXAtom - ORD " > < mstyle

--------------------------------------------------
encoding = " application / x - t ex " > {\displaystyle \ Omega \ ! }< / annotation >
< / semantics > : MATH ]
{\displaystyle \ Omega \ ! } 逻辑 运算 符集合 。
在 合取 、 析取 和 蕴涵 （ ∧ 、 ∨ 和 → ） 这 三 个 运算符 之中 ， 可以 将 其中 一个 拿 来 当做 基本 的 ， 而 另 两 个 则 以 其 和 否 定 （ ¬ ） 来 定义 。 实际上 ， 所有 的 逻辑 运
算符 都 可以 用 自足 算子 的 方式 来 定义 。 而 双 条件 （ ↔ ） 当然 可 由 合取 和 蕰涵 来 定义 ， 亦 即 a ↔ b 可 被 定义 为 ( a → b ) ∧ ( b → a ) 。

--------------------------------------------------
< / semantics > : MATH ]
{\displaystyle \ Omega \ ! } 逻辑 运算 符集合 。
在 合取 、 析取 和 蕴涵 （ ∧ 、 ∨ 和 → ） 这 三 个 运算符 之中 ， 可以 将 其中 一个 拿 来 当做 基本 的 ， 而 另 两 个 则 以 其 和 否 定 （ ¬ ） 来 定义 。 实际上 ， 所有 的 逻辑 运
算符 都 可以 用 自足 算子 的 方式 来 定义 。 而 双 条件 （ ↔ ） 当然 可 由 合取 和 蕰涵 来 定义 ， 亦 即 a ↔ b 可 被 定义 为 ( a → b ) ∧ ( b → a ) 。


--------------------------------------------------
, \ rightarrow , \ leftrightarrow \}\ , } 。

在 此 命题 演算 的 例子 中 ， 变换 规 则 被 解释 为 所谓 的 “ 自然 演绎 系统 ” 下 之 推理 规 则 。 这里 表述 的 特定 系统 没有 起 始点 ， 这 意味着 它 对 逻辑 应用 的 解
释 是 从 空 公理 集合 中 推导 出 其 定理 的 。


--------------------------------------------------
[ 编辑 ]

（ 对于 多数 逻辑 系统 ， 这 是 相对 “ 简单 ” 的 证明 方向 ）

符号 约定 ： 设G 是 命题 集合 。 设φ 、 ψ 和 χ 是 命题 。 我们 把 “ G语法 蕴涵φ ” 写 成 “ G证明φ ” ， 还有 把 “ G语义 蕴涵φ ” 写 成 “ G蕴涵 φ ” 。

--------------------------------------------------
ψ ， G蕴涵 ψ 。

需要 注意 的 是 ， 对于 自然 演绎 系统 ， 基础 步骤 II 可以 省略 ， 因为 它们 根本 没有 公理 。 基本 上 ， 基础 步骤 II 是 要 展示 每个 公理 都 是 （ 语义 上 的 ） 逻辑 真理 。

基础 步骤 证实 了 对于 任何 G ， 来 自G 的 最 简单 的 可 证明 的 语句 都 被 G 所 蕴涵 。 （ 这 是 简单 的 ， 因为 集合 蕴涵 它 的 任何 一个 成员 ， 是 个 平凡 的 语义 事实 ） 。 归纳 步骤

--------------------------------------------------

基础 步骤 证实 了 对于 任何 G ， 来 自G 的 最 简单 的 可 证明 的 语句 都 被 G 所 蕴涵 。 （ 这 是 简单 的 ， 因为 集合 蕴涵 它 的 任何 一个 成员 ， 是 个 平凡 的 语义 事实 ） 。 归纳 步骤
将 有 系统 的 覆盖 所有 的 进一步 的 可 证明 的 命题 -- 通过 考虑 我们 能够 使用 推理 规 则 达成 逻辑 结论 的 每 种 情况 -- 并 展示 如果 一个 新 命题 是 可 证明 的 ， 它 也 是 在 逻辑
上 被 蕴涵 的 。 （ 例如 ， 可能 有 一个 规 则 ， 使得 从 φ 可以 推导 出 “ φ 或 ψ ” 。 在 III . （ a ） 中 我们 假定 如果 φ 是 可 证明 的 则 它 也 是 被 蕴涵 的 。 我们 也 知道 如果 φ
是 可 证明 的 ， 则 “ φ 或 ψ ” 是 可 证明 的 。 接着 ， 我们 必须 验证 “ φ 或 ψ ” 也 是 被 蕴涵 的 。 我们 求助 于 语义 的 定义 和 我们 所 做 的 假定 来 完成 。 我们 假定 了 φ 是 可以 从

--------------------------------------------------
[ 编辑 ]

下面 定义 的 命题 演算 通过 公理 的 方式 定义 了 多数 逻辑 算子 的 语法 并且 它 只 使用 一个 推理 规 则 。 它 也 叫做 标准 命题 演算 。

公理

--------------------------------------------------
取 算子 的 交换律 。 公理 AND - 3 对应 于 “ 合取 介入 ” 。 公理 OR - 1 和 OR - 2 对应 于 “ 析取 介入 ” 。 在 OR - 1 和 OR - 2 之间 的 关系 反映 了 析取 算子 的 交换
律 。 公理 NOT - 1 对 应 于 反证法 。 公理 NOT - 2 说明 了 “ 从 矛盾 中 可以 推导 出 任何 东西 ” 。 公理 NOT - 3 叫做 排中律 （ 拉丁语tertium non
datur ： “ 排除 第三者 ” ） 并 反映 了 命题 公式 的 语义 求值 ： 公式 的 真值 要 么 是 真 要 么 是 假 。 至少 在 经典 逻辑 中 ， 没有 第三 个 真值 。 直觉 逻辑 不 接受 公理 NOT
- 3 。


--------------------------------------------------
得 自 （ 3 ） 和 （ 4 ） 通过 肯定 前件 。

等 价 于 等 式逻辑

[ 编辑 ]

--------------------------------------------------
[ 编辑 ]

前面 的 公理化 命题 演 算是 希尔伯特 风格 演绎 系统 的 一个 例子 。 在 这种 命题 系统 中 公理 是 用 逻辑链 接词 构建 的 项 ， 而 唯一 的 推理 规 则 是 肯定 前件 。 等 式逻辑 在 高等学
校 的 抽象代 数 教学 中 被 作为 正式 的 标准 ， 它 是 不 同 于 希尔伯特 系统 的 一 类 不 同 的 演算 。 它 的 定理 是 等式 而 它 的 推理 规 则 表达 出 等号 的 性质 ， 也 就是 在 容许 代换 的 项
上 的 相等 关系 。

--------------------------------------------------
< / semantics > : MATH ]
{\displaystyle x \ \ vdash \ y }
之间 的 区别 在于 ， 前者 是 内在 于逻辑 的 ， 而 后者 是 外在 的 。 在 两 个 项 之间 内在 的 实质 条件 是 同类 的 另 一个 项 。 在 两 个 项 之间 的 外在 的 蕴涵 表达 了 在 逻辑 语言 之外 的
元 真理 ， 并 被 认为 是 元语言 的 一 部分 。 即使 所 研究 的 逻辑 是 直觉 的 ， 蕴涵 都 通常 经典 的 理解 为 二 值 的 ： 要 么 左侧 蕴涵 （ 或 小于 等于 ） 右侧 ， 要 么 不 蕴涵 之 。


--------------------------------------------------
{\displaystyle x \ \ vdash \ y }
之间 的 区别 在于 ， 前者 是 内在 于逻辑 的 ， 而 后者 是 外在 的 。 在 两 个 项 之间 内在 的 实质 条件 是 同类 的 另 一个 项 。 在 两 个 项 之间 的 外在 的 蕴涵 表达 了 在 逻辑 语言 之外 的
元 真理 ， 并 被 认为 是 元语言 的 一 部分 。 即使 所 研究 的 逻辑 是 直觉 的 ， 蕴涵 都 通常 经典 的 理解 为 二 值 的 ： 要 么 左侧 蕴涵 （ 或 小于 等于 ） 右侧 ， 要 么 不 蕴涵 之 。

同 代数 逻辑 之间 类似 但 更加 复杂 的 相互 转换 ， 对于 自然 演绎 系统 和 相继式 演算 也 是 可能 的 。 后者 的 转换 可以 被 释义 为 二值 的 ， 但是 更 有 洞察力 的 释义 是 作为 集合 ，

--------------------------------------------------
元 真理 ， 并 被 认为 是 元语言 的 一 部分 。 即使 所 研究 的 逻辑 是 直觉 的 ， 蕴涵 都 通常 经典 的 理解 为 二 值 的 ： 要 么 左侧 蕴涵 （ 或 小于 等于 ） 右侧 ， 要 么 不 蕴涵 之 。

同 代数 逻辑 之间 类似 但 更加 复杂 的 相互 转换 ， 对于 自然 演绎 系统 和 相继式 演算 也 是 可能 的 。 后者 的 转换 可以 被 释义 为 二值 的 ， 但是 更 有 洞察力 的 释义 是 作为 集合 ，
它 的 元素 可以 被 理解 为由 范畴 的 态射 组成 的 抽象 证明 。 在 这种 释义 下 相继式 演算 的 切规 则 对应 于 范畴 的 复合 。


--------------------------------------------------
它 的 元素 可以 被 理解 为由 范畴 的 态射 组成 的 抽象 证明 。 在 这种 释义 下 相继式 演算 的 切规 则 对应 于 范畴 的 复合 。

其他 逻辑 演算

[ 编辑 ]

--------------------------------------------------
[ 编辑 ]

命题 演算 大概 是 在 所有 当前 使用 的 逻辑 演算 中 最 简单 的 一 种 。 （ 亚里士多德 的 “ 三 段 论 ” 演算 ， 在 现代 逻辑 中 在 很 大 程度 上 被 替代 了 ， 它 与 命题 逻辑 相比 在 某些 方
面 更 简单 -- 但 在 其他 方面 更加 复杂 ） 。 它 可以 按 很多 方式 来 扩展 。


--------------------------------------------------
面 更 简单 -- 但 在 其他 方面 更加 复杂 ） 。 它 可以 按 很多 方式 来 扩展 。

最 直接 的 方式 是 开发 一个 更加 复杂 的 逻辑 演算 ， 介入 对 所 用于 的 句子 的 更 精细 的 细节 敏感 的 规 则 。 在 命题 逻辑 中 的 原子 句子 被 分解 成 项 （ 英语 ： Singular
term ） 、 变量 、 谓 词 和 量词 的 时候 ， 它们 就 生成 了 一 阶 逻辑 ， 或者 叫做 一 阶谓 词逻辑 ， 它 保留 命题 逻辑 的 所有 规 则 并 增加 了 一些 新规 则 。 （ 例如 ， 从 “ 所有 的
狗 都 是 动物 ” 我们 可以 推出 “ 如果 Rover 是 狗 ， 则 Rover 是 动物 ” ） 。

--------------------------------------------------

最 直接 的 方式 是 开发 一个 更加 复杂 的 逻辑 演算 ， 介入 对 所 用于 的 句子 的 更 精细 的 细节 敏感 的 规 则 。 在 命题 逻辑 中 的 原子 句子 被 分解 成 项 （ 英语 ： Singular
term ） 、 变量 、 谓 词 和 量词 的 时候 ， 它们 就 生成 了 一 阶 逻辑 ， 或者 叫做 一 阶谓 词逻辑 ， 它 保留 命题 逻辑 的 所有 规 则 并 增加 了 一些 新规 则 。 （ 例如 ， 从 “ 所有 的
狗 都 是 动物 ” 我们 可以 推出 “ 如果 Rover 是 狗 ， 则 Rover 是 动物 ” ） 。


--------------------------------------------------
狗 都 是 动物 ” 我们 可以 推出 “ 如果 Rover 是 狗 ， 则 Rover 是 动物 ” ） 。

通过 一 阶 逻辑 的 工具 ， 有 可能 公式化 一些 理论 ， 要 么 带有 显式 的 公理 要 么 通过 推理 规 则 ， 而 把 它们 自身 当作 逻辑 演算 。 算术 是 其中 最 周知 的 理论 ； 其他 的 还 包括 集
合论 和 分体论 。


--------------------------------------------------
合论 和 分体论 。

模态 逻辑 也 提供 了 一 种 推理 的 变体 ， 它 不 能 在 命题 演 算 中 捕获 。 例如 ， 从 “ 必然 地 p ” 我们 可以 推出 p 。 从 p 我们 可以 推出 “ 可能 地 p ” 。

多 值 逻辑 是 允许 句子 有除 了 “ 真 ” 和 “ 假 ” 之外 的 值 的 逻辑 。 （ 例如 ， “ 都 不 ” 和 “ 都 是 ” 是 标准 的 “ 额外值 ” ； “ 连 续统 逻辑 ” 允许 每个 句子 有 任何 的 在 “ 真 ”

--------------------------------------------------
模态 逻辑 也 提供 了 一 种 推理 的 变体 ， 它 不 能 在 命题 演 算 中 捕获 。 例如 ， 从 “ 必然 地 p ” 我们 可以 推出 p 。 从 p 我们 可以 推出 “ 可能 地 p ” 。

多 值 逻辑 是 允许 句子 有除 了 “ 真 ” 和 “ 假 ” 之外 的 值 的 逻辑 。 （ 例如 ， “ 都 不 ” 和 “ 都 是 ” 是 标准 的 “ 额外值 ” ； “ 连 续统 逻辑 ” 允许 每个 句子 有 任何 的 在 “ 真 ”
和 “ 假 ” 之间 的 表示 “ 真实 程度 ” 的 无限 个值 ） 。 这些 逻辑 经常 要求 与 命题 逻辑 非常 不 同 的 运算 设备 。


--------------------------------------------------

多 值 逻辑 是 允许 句子 有除 了 “ 真 ” 和 “ 假 ” 之外 的 值 的 逻辑 。 （ 例如 ， “ 都 不 ” 和 “ 都 是 ” 是 标准 的 “ 额外值 ” ； “ 连 续统 逻辑 ” 允许 每个 句子 有 任何 的 在 “ 真 ”
和 “ 假 ” 之间 的 表示 “ 真实 程度 ” 的 无限 个值 ） 。 这些 逻辑 经常 要求 与 命题 逻辑 非常 不 同 的 运算 设备 。

参见

--------------------------------------------------

[ 编辑 ]
* 逻辑
* 零阶 逻辑
* 演绎 推理

--------------------------------------------------
[ 编辑 ]
* 逻辑
* 零阶 逻辑
* 演绎 推理
* 希尔伯特 演绎 系统

--------------------------------------------------
* 推理 规 则 列表 （ 英语 ： List of rules of inference ）
* 相继式 演算
* 布尔逻辑
* 布尔代 数
* 一 阶逻辑

--------------------------------------------------
* 布尔逻辑
* 布尔代 数
* 一 阶逻辑

引用

--------------------------------------------------
* 编

逻辑 联结词
* 恒真 （
[ MATH : < semantics > < mrow class = " MJX - TeXAtom - ORD " > < mstyle

--------------------------------------------------
* 编

数理 逻辑

基本 概念

--------------------------------------------------
+ 列表
* 势
* 一 阶逻辑
* 形式 证法 （ 英语 ： Formal proof ）
* 逻辑 语义学

--------------------------------------------------
* 一 阶逻辑
* 形式 证法 （ 英语 ： Formal proof ）
* 逻辑 语义学
* 数学 基础
* 信息论

--------------------------------------------------
* 罗 素悖论

逻辑

传统 逻辑

--------------------------------------------------
逻辑

传统 逻辑
* 逻辑 真理
* 恒真式

--------------------------------------------------

传统 逻辑
* 逻辑 真理
* 恒真式
* 命题

--------------------------------------------------
* 命题
* 推理
* 逻辑 等 价
* 一致性
+ 相同 一致性 （ 英语 ： Equicons istency ）

--------------------------------------------------
* 一致性
+ 相同 一致性 （ 英语 ： Equicons istency ）
* 逻辑 论证
* 可靠性 定理
* 有效性

--------------------------------------------------
* 文氏 图

命题 逻辑
* 逻辑 代数
* 布尔函数

--------------------------------------------------

命题 逻辑
* 逻辑 代数
* 布尔函数
* 逻辑 运算 符

--------------------------------------------------
* 逻辑 代数
* 布尔函数
* 逻辑 运算 符
* 命题 逻辑
* 命题 公式

--------------------------------------------------
* 布尔函数
* 逻辑 运算 符
* 命题 逻辑
* 命题 公式
* 真 值表

--------------------------------------------------
* 命题 公式
* 真 值表
* 多 值 逻辑
+ 三 值
+ 有限值 （ 英语 ： Finite - v alued logic ）

--------------------------------------------------
+ 无限值

经典 逻辑
* 经典 逻辑
* 一 阶逻辑

--------------------------------------------------

经典 逻辑
* 经典 逻辑
* 一 阶逻辑
* 二阶 逻辑

--------------------------------------------------
经典 逻辑
* 经典 逻辑
* 一 阶逻辑
* 二阶 逻辑
+ 一 元 （ 英语 ： Monadic second - order logic ）

--------------------------------------------------
* 经典 逻辑
* 一 阶逻辑
* 二阶 逻辑
+ 一 元 （ 英语 ： Monadic second - order logic ）
* 高阶 逻辑

--------------------------------------------------
* 二阶 逻辑
+ 一 元 （ 英语 ： Monadic second - order logic ）
* 高阶 逻辑
* 自由 逻辑
* 量化

--------------------------------------------------
+ 一 元 （ 英语 ： Monadic second - order logic ）
* 高阶 逻辑
* 自由 逻辑
* 量化
* 谓词 （ 英语 ： Predicate ( mathematical logic ) ）

--------------------------------------------------
* 自由 变量 和 约束 变量
* 元 语言
* 逻辑 运算 符
+ ¬
+ ∨

--------------------------------------------------
+ →
+ ↔
+ 逻辑 相等 （ 英语 ： Logical equality ）
* 谓词 （ 英语 ： Predicate ( mathematical logic ) ）
+ 泛 函谓 词

--------------------------------------------------
* 句子
+ 原子 句子
* 逻辑 签名 （ 英语 ： Signature ( logic ) ）
* 字符串
* 替换法 （ 英语 ： Substitution ( logic ) ）

--------------------------------------------------
* 字符串
* 替换法 （ 英语 ： Substitution ( logic ) ）
* 逻辑 符号
+ 函数 符号
+ 逻辑 常量 （ 英语 ： Logical cons tant ）

--------------------------------------------------
* 逻辑 符号
+ 函数 符号
+ 逻辑 常量 （ 英语 ： Logical cons tant ）
+ 非逻辑 符号 （ 英语 ： Non - l ogical symbol ）
+ 变量

--------------------------------------------------
+ 函数 符号
+ 逻辑 常量 （ 英语 ： Logical cons tant ）
+ 非逻辑 符号 （ 英语 ： Non - l ogical symbol ）
+ 变量
* 逻辑 术语 （ 英语 ： Term ( logic ) ）

--------------------------------------------------
+ 非逻辑 符号 （ 英语 ： Non - l ogical symbol ）
+ 变量
* 逻辑 术语 （ 英语 ： Term ( logic ) ）

公理 系统 示例

--------------------------------------------------
* 完备 模型论 （ 英语 ： Model complete theory ）
* 可 满足性 （ 英语 ： Satisfiability ）
* 逻辑 语义学
* 强度 （ 英语 ： Streng th ( mathematical logic ) ）
* 真理

--------------------------------------------------
其他 相关

* 抽象 逻辑 （ 英语 ： Abstract logic ）
* 范畴论
* 具象 范畴 、 抽象 范畴

--------------------------------------------------
* 具象 范畴 、 抽象 范畴
* 集合 范畴
* 逻辑史
* 数理 逻辑
+ 历史 年表 （ 英语 ： Timeline of mathematical logic ）

--------------------------------------------------
* 集合 范畴
* 逻辑史
* 数理 逻辑
+ 历史 年表 （ 英语 ： Timeline of mathematical logic ）
* 逻辑主义

--------------------------------------------------
* 数理 逻辑
+ 历史 年表 （ 英语 ： Timeline of mathematical logic ）
* 逻辑主义
* 数学 对象
* 数学 哲学

--------------------------------------------------
[ 16 p x - Nuvola _ apps _ edu _ mathematics _ blue - p . sv g . png ] 数学 主题

检索 自 “ https : // z h . wikipedia . org / w / inde x . php ? title = 命题 逻辑 & oldid = 78064914 ”

分类 ： ​

--------------------------------------------------

分类 ： ​
* 逻辑
* 数理 逻辑
* 形式逻辑 系统

--------------------------------------------------
分类 ： ​
* 逻辑
* 数理 逻辑
* 形式逻辑 系统
* 命题 演算

--------------------------------------------------
* 逻辑
* 数理 逻辑
* 形式逻辑 系统
* 命题 演算


--------------------------------------------------
